package com.wskj.app.controller.fore;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.google.gson.Gson;
import com.wskj.app.service.UserService;
import com.wskj.app.util.other.Bank;
import com.wskj.app.vo.User;

/**
 * 关于用户的controller
 * 
 * @author
 *
 */
@Controller
@RequestMapping("/fore/user")
public class UserController {
	
    @Autowired
    private Bank bank;
	@Autowired
	private UserService userService;

	/**
	 * 跳转到我的数据页面的方法
	 * 
	 * @return
	 */
	@RequestMapping("/api.do")
	public String api(Model mo,HttpSession session) {
		//根据用户id获得数据汇总
		User u = (User) session.getAttribute("user");
		Integer user_id = u.getNoid();
		List<Map> countDate=userService.getCountApplybyUserId(user_id);
		mo.addAttribute("countDate", countDate);
		return "fore/user/api";
	}

	/**
	 * 跳转到申请数据页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/apply.do")
	public String apply(HttpSession session) {
		
		try {
			User u = (User) session.getAttribute("user");
			u.getAppKey();
		} catch (Exception e) {
			// TODO: handle exception
			return "fore/user/login";
		}
		
		
		return "fore/user/apply";
	}

	/**
	 * 跳转到我的头像页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/avatar.do")
	public String avatar(Model m, HttpSession session) {
		User u = (User) session.getAttribute("user");
		Integer noid = u.getNoid();
		String url = userService.getAvatarUrl(noid);
		m.addAttribute("url", url);
		m.addAttribute("noid", noid);
		return "fore/user/avatar";
	}

	/**
	 * 头像上传
	 * @param noid
	 * @param fl
	 * @param m
	 * @return
	 */
	@RequestMapping("/update_avatar.do")
	public String updateAvatar(Integer noid, MultipartFile fl,Model m) {
		String targetPath = null;
		String resPath = UserController.class.getResource("/").getFile();
		String rootPath = new File(resPath).getParentFile().getParentFile().getParent() + "/images/"+noid+"/";
		File ff = new File(rootPath);
		if (!ff.exists()) {
			ff.mkdirs();
		}
		try {
			fl.transferTo(new File(ff + "/" + fl.getOriginalFilename()));
			targetPath = "images/" + noid + "/" + fl.getOriginalFilename();
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}
		Integer cnt = userService.updateAvatar(targetPath,noid);
		m.addAttribute("url", targetPath);
		return "fore/user/avatar";
	}

	/**
	 * 跳转到账户余额页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/balance.do")
	public String balance(Model m, HttpSession session) {
		User u=(User) session.getAttribute("user");
		Integer noid = u.getNoid();
		Float balance =userService.getBalanceById(noid);
		if (balance==null) {
			balance=0f;
		}
		m.addAttribute("balance", balance);
		return "fore/user/balance";
	}

	/**
	 * 用户充值的方法
	 * @param session 
	 * @return
	 */
	@RequestMapping("exec_recharge.do")
	@ResponseBody
	public String execRecharge(String cardId,String cardPwd,String userName,Float money, HttpSession session){
		Integer result = bank.checkBankCard(cardId, userName, cardPwd);
		if (result==null) {
			return "nocard";
		}
		Float balanceInbank = bank.getBalance(cardId, cardPwd);
		if (money>balanceInbank) {
			return "nomoney";
		}
		bank.minusMoney(cardId, cardPwd, money);
		User u=(User) session.getAttribute("user");
		Integer noid = u.getNoid();
		Float balance=userService.getBalanceById(noid);
		if (balance==null) {
			balance=0f;
		}
		Float nowBalance = balance+money;
		userService.updateBalance(noid,nowBalance);
		String orderNumb=new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		userService.addRecord(orderNumb,new Date(),money,noid);
		return "success";	
	}
	/**
	 * 跳转到个人资料的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/profile.do")
	public String profile(Model m, HttpSession session) {
		User user = (User) session.getAttribute("user");
		Integer noid = user.getNoid();
		m.addAttribute("noid", noid);
		Map<String, Object> userInfo = userService.getUserInfoById(noid);
		m.addAttribute("userInfo", userInfo);
		List<Map<String, Object>> provinces = userService.getProvinces();
		m.addAttribute("provinces", provinces);
		Map<String, Object> address = userService.getAddressById(noid);
		if (address != null && address.get("pId") != null && address.get("cId") != null && address.get("dId") != null) {
			Integer pId = (Integer) address.get("pId");
			Integer cId = (Integer) address.get("cId");
			List<Map<String, Object>> citys = userService.getCitys(pId);
			m.addAttribute("citys", citys);
			List<Map<String, Object>> districts = userService.getDistricts(cId);
			m.addAttribute("districts", districts);
		}
		return "fore/user/profile";
	}

	/**
	 * 跳转到修改密码页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/password.do")
	public String password(Model m, HttpSession session) {
		User user = (User) session.getAttribute("user");
		Integer noid = user.getNoid();
		m.addAttribute("noid", noid);
		return "fore/user/password";
	}

	/**
	 * 修改密码的方法
	 * 
	 * @param noid
	 * @param pwd
	 * @param pwd1
	 * @return
	 */
	@RequestMapping("/edit_pwd.do")
	@ResponseBody
	public String edit_pwd(Integer noid, String pwd, String pwd1) {
		if (pwd == null || !pwd.matches("\\w{8,16}") || !pwd.equals(pwd1)) {
			return "fail";
		}
		Integer cnt = userService.editPwd(noid, pwd);
		if (cnt <= 0) {
			return "fail";
		}
		return "success";
	}

	/**
	 * 跳转到充值页面的方法
	 * 
	 * @return
	 */
	@RequestMapping("/recharge.do")
	public String recharge() {
		return "fore/user/recharge";
	}

	/**
	 * 跳转到个人中心页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/my.do")
	public String my(Model m, HttpSession session) {
		User user=(User) session.getAttribute("user");
		Integer noid = user.getNoid();
		Map<String, Object> u = userService.getUserInfoById(noid);
		String userCode = (String) u.get("userCode");
		String nickName = (String) u.get("nickName");
		String mail = (String) u.get("mail");
		String appKey = (String) u.get("appKey");
		Float balance = userService.getBalanceById(noid);
		if (balance==null) {
			balance=0f;
		}
		List<Map> countDate=userService.getCountApplybyUserId(noid);
		m.addAttribute("countDate", countDate);
		m.addAttribute("balance", balance);
		m.addAttribute("userCode", userCode);
		m.addAttribute("nickName", nickName);
		m.addAttribute("mail", mail);
		m.addAttribute("appKey", appKey);
		return "fore/user/my";
	}

	/**
	 * 跳转到付费页面的方法
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/buy.do")
	public String buy(Integer api_id,Model mo, HttpSession session) {
	
		User user=(User) session.getAttribute("user");
		if(user==null){
			return "fore/user/login";
		}	
		
		//读取套餐
		List<Map> set_meal=userService.getSetMeal(api_id);
		//获得api名称和图片地址
		Map ma=userService.getApiData(api_id);
		//第一次购买出现0元的，之后不出现，判断本api购买次数==0就行****************
		mo.addAttribute("api_name", ma.get("api_name"));
		mo.addAttribute("img_url", ma.get("img_url"));
		mo.addAttribute("set_meal", set_meal);
		return "fore/user/buy";
	}

	/**
	 * 跳转到充值记录的页面
	 * @param session 
	 * 
	 * @return
	 */
	@RequestMapping("/recharge_log.do")
	public String recharge_log(Model m, HttpSession session) {
		User u=(User) session.getAttribute("user");
		Integer noid=u.getNoid();
		List<Map<String,Object>> logs=userService.rechargeLog(noid);
		m.addAttribute("logs", logs);
		return "fore/user/recharge_log";
	}
	
	@RequestMapping("/del_record.do")
	@ResponseBody
	public String delRecharge(Integer noid){
		Integer cnt=userService.delRecharge(noid);
		if (cnt>0) {
			return "success";
		}
		return "failed";
	}

	/**
	 * 编辑用户信息
	 * 
	 * @param nickName
	 * @param sex
	 * @param age
	 * @param mobile
	 * @param email
	 * @param province
	 * @param city
	 * @param district
	 * @return
	 */
	@RequestMapping("/update_info.do")
	@ResponseBody
	public String updateUserInfo(Integer noid, String nickName, Integer sex, Integer age, String mobile, String email,
			Integer province, Integer city, Integer district) {
		if (nickName.length() > 15 || sex <= 0 || sex >= 130 || !mobile.matches("^[1][3|5|8][0-9]{9}$")
				|| !email.matches("^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+")) {
			return "failed";
		}
		Integer cnt = userService.updateUserInfo(noid, nickName, sex, age, mobile, email, province, city, district);
		if (cnt > 0) {
			return "success";
		} else {
			return "failed";
		}
	}

	/**
	 * 根据省份获取相应的城市列表
	 * 
	 * @param pId
	 * @return
	 */
	@RequestMapping("/get_citys.do")
	@ResponseBody
	public String getCitys(Integer pId) {
		List<Map<String, Object>> citys = userService.getCitys(pId);
		Gson gson = new Gson();
		return gson.toJson(citys);
	}

	/**
	 * 根据城市获取相应的区县列表
	 * 
	 * @param cId
	 * @return
	 */
	@RequestMapping("/get_districts.do")
	@ResponseBody
	public String getDistricts(Integer cId) {
		List<Map<String, Object>> districts = userService.getDistricts(cId);
		Gson gson = new Gson();
		return gson.toJson(districts);
	}
	
	@RequestMapping("/do_buy.do")
	public String do_buy(Integer totalfee,Integer[] meal_id,Model mo,Integer api_id, HttpSession session){
		
		User user=(User) session.getAttribute("user");
		Integer user_id = user.getNoid();
		//进行购买1.余额支付 2、支付宝支付
		//从账号中获得余额判断
		Float balence= userService.getBalenceByUserId(user_id);
		if(balence==null){
			balence=0f;
		}
		//余额不足
		if(balence<totalfee){
			mo.addAttribute("msg","账户余额不足，请充值");
			mo.addAttribute("targetUrl","/fore/user/balance.do");
			mo.addAttribute("targetName","充值页面");
			return "/alert/alert";
		}
		//输入密码进行支付
		
		//获得购买数量
		//获得购买的套餐详情
		Map ma= userService.getOnePriceByMealId(meal_id[0]);
		//获得单价 数量
		Integer onePrice =((BigDecimal) ma.get("price")).intValue();
		Integer cut =(Integer) ma.get("number");
		Integer apply_cut=(int) (totalfee/onePrice*cut);	
		//插入申请详情表t_apply_detail
		userService.addApplyDetail(api_id,user_id,totalfee,apply_cut);
		
		//更新或新增统计列表
		//根据api_id user_id  判断count统计列表是否存在
		List<Map> cont = userService.getCountState(api_id,user_id);
		if(cont.size()==1){
			//已存在统计数据，更新
			Map co=cont.get(0);
			Integer all_apply_money =(Integer) co.get("all_apply_money");
			all_apply_money=all_apply_money+totalfee;
			userService.updateCountApply(api_id,user_id,all_apply_money,apply_cut);
		}else{
			
			//不存在统计数据，插入
			userService.addCountApply(api_id,user_id,totalfee,apply_cut);
		}
		
		//修改用户余额
			Float balance = balence-totalfee;
			userService.updateUserBalance(user_id,balance);
			
		//支付成功，跳转至购买列表页面
		return "redirect:/fore/user/api.do";
		
	}
	
	/**
	 *打开客服聊天列表
	 * @return
	 */
	@RequestMapping("/custom_service.do")
	public String customService() {
		return "fore/user/custom_service";
	}
	
}
